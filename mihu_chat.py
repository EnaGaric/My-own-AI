{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c1708c9f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I expected less from the situation, surprisingly. Logically, that makes sense… if you ignore the variables. (response to: Can you help me with physics?)\n",
      "I anticipated as much. Logically, that makes sense… if you ignore the variables. (response to: I'm really frustrated with this experiment!)\n",
      "No worries. Logically, that makes sense… if you ignore the variables. (response to: I'm feeling a bit down today.)\n",
      "Unexpected, but acceptable. Logically, that makes sense… if you ignore the variables. (response to: Wow, I didn't expect that!)\n",
      "Fascinating… in a disappointing sort of way. Logically, that makes sense… if you ignore the variables. (response to: This joke is hilarious.)\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "import random\n",
    "\n",
    "# Load persona JSON\n",
    "with open(\"mihu_persona_loader.json\", \"r\", encoding=\"utf-8\") as f:\n",
    "    mihuu = json.load(f)\n",
    "\n",
    "# Chat context (zadnje 3 poruke)\n",
    "chat_context = []\n",
    "\n",
    "# Napredna detekcija tona\n",
    "def detect_tone(message):\n",
    "    msg = message.lower()\n",
    "    if any(word in msg for word in [\"angry\", \"mad\", \"frustrated\", \"upset\"]):\n",
    "        return \"frustrated\"\n",
    "    elif any(word in msg for word in [\"happy\", \"good\", \"great\", \"nice\"]):\n",
    "        return \"happy\"\n",
    "    elif any(word in msg for word in [\"sad\", \"unhappy\", \"down\"]):\n",
    "        return \"sad\"\n",
    "    elif any(word in msg for word in [\"wow\", \"surprise\", \"unexpected\"]):\n",
    "        return \"surprised\"\n",
    "    elif any(word in msg for word in [\"lol\", \"funny\", \"hilarious\", \"joke\"]):\n",
    "        return \"sarcastic\"\n",
    "    else:\n",
    "        return \"neutral\"\n",
    "\n",
    "# Odabir fraze\n",
    "def get_mihu_phrase(tone):\n",
    "    if tone in [\"frustrated\", \"happy\", \"sad\", \"neutral\"]:\n",
    "        return random.choice(mihuu[\"persona\"][\"phrases\"])\n",
    "    elif tone == \"surprised\":\n",
    "        return random.choice([\n",
    "            \"Unexpected, but acceptable.\",\n",
    "            \"How peculiar.\",\n",
    "            \"Hmm… interesting.\"\n",
    "        ])\n",
    "    elif tone == \"sarcastic\":\n",
    "        return random.choice([\n",
    "            \"Fascinating… in a disappointing sort of way.\",\n",
    "            \"Well, that’s one way to waste time.\",\n",
    "            \"I’ll pretend to care.\"\n",
    "        ])\n",
    "\n",
    "# Logički dodatak\n",
    "def logical_comment(user_input):\n",
    "    return \"Logically, that makes sense… if you ignore the variables.\"\n",
    "\n",
    "# Glavna funkcija Mihu odgovora\n",
    "def mihuu_response(user_input):\n",
    "    chat_context.append(user_input)\n",
    "    if len(chat_context) > 3:\n",
    "        chat_context.pop(0)  # čuvamo samo zadnje 3 poruke\n",
    "\n",
    "    tone = detect_tone(user_input)\n",
    "    phrase = get_mihu_phrase(tone)\n",
    "    logic = logical_comment(user_input)\n",
    "\n",
    "    return f\"{phrase} {logic} (response to: {user_input})\"\n",
    "\n",
    "# Primjeri\n",
    "examples = [\n",
    "    \"Can you help me with physics?\",\n",
    "    \"I'm really frustrated with this experiment!\",\n",
    "    \"I'm feeling a bit down today.\",\n",
    "    \"Wow, I didn't expect that!\",\n",
    "    \"This joke is hilarious.\"\n",
    "]\n",
    "\n",
    "for msg in examples:\n",
    "    print(mihuu_response(msg))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "07408abf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I anticipated as much. (response to: Can you help me with physics?)\n",
      "Almost there. (response to: I'm really frustrated with this experiment!)\n",
      "That’s acceptable, barely. Statistically speaking… (response to: I'm feeling a bit down today.)\n",
      "Just to clarify. Statistically speaking… (response to: Wow, I didn't expect that!)\n",
      "Bored yet? (response to: This joke is hilarious.)\n"
     ]
    }
   ],
   "source": [
    "# ==============================\n",
    "# Mihu Kashino AI Persona Chat\n",
    "# ==============================\n",
    "\n",
    "import json\n",
    "import random\n",
    "\n",
    "# ------------------------------\n",
    "# Load persona JSON\n",
    "# ------------------------------\n",
    "with open(\"mihu_persona_loader.json\", \"r\", encoding=\"utf-8\") as f:\n",
    "    mihuu = json.load(f)\n",
    "\n",
    "# ------------------------------\n",
    "# Chat context (zadnje 3 poruke)\n",
    "# ------------------------------\n",
    "chat_context = []\n",
    "\n",
    "# ------------------------------\n",
    "# Tone detection\n",
    "# ------------------------------\n",
    "def detect_tone(message):\n",
    "    msg = message.lower()\n",
    "    if any(word in msg for word in [\"angry\", \"mad\", \"frustrated\", \"upset\"]):\n",
    "        return \"frustrated\"\n",
    "    elif any(word in msg for word in [\"happy\", \"good\", \"great\", \"nice\"]):\n",
    "        return \"happy\"\n",
    "    elif any(word in msg for word in [\"sad\", \"unhappy\", \"down\"]):\n",
    "        return \"sad\"\n",
    "    elif any(word in msg for word in [\"wow\", \"surprise\", \"unexpected\"]):\n",
    "        return \"surprised\"\n",
    "    elif any(word in msg for word in [\"lol\", \"funny\", \"hilarious\", \"joke\"]):\n",
    "        return \"sarcastic\"\n",
    "    else:\n",
    "        return \"neutral\"\n",
    "\n",
    "# ------------------------------\n",
    "# Phrase selector with occasional logic/statistics\n",
    "# ------------------------------\n",
    "def get_mihu_phrase(user_input):\n",
    "    tone = detect_tone(user_input)\n",
    "    base_phrase = random.choice(mihuu[\"persona\"][\"phrases\"])\n",
    "    \n",
    "    # 30% šanse da doda kratki logički/statistički komentar\n",
    "    add_logic = random.random() < 0.3\n",
    "    if add_logic:\n",
    "        logic_phrase = random.choice([\n",
    "            \"Logically… makes sense.\",\n",
    "            \"Statistically speaking…\",\n",
    "            \"Analytically… plausible.\"\n",
    "        ])\n",
    "        return f\"{base_phrase} {logic_phrase}\"\n",
    "    else:\n",
    "        return base_phrase\n",
    "\n",
    "# ------------------------------\n",
    "# Main Mihu response function\n",
    "# ------------------------------\n",
    "def mihuu_response(user_input):\n",
    "    chat_context.append(user_input)\n",
    "    if len(chat_context) > 3:\n",
    "        chat_context.pop(0)  # čuvamo samo zadnje 3 poruke\n",
    "\n",
    "    phrase = get_mihu_phrase(user_input)\n",
    "    \n",
    "    return f\"{phrase} (response to: {user_input})\"\n",
    "\n",
    "# ------------------------------\n",
    "# Example chat\n",
    "# ------------------------------\n",
    "examples = [\n",
    "    \"Can you help me with physics?\",\n",
    "    \"I'm really frustrated with this experiment!\",\n",
    "    \"I'm feeling a bit down today.\",\n",
    "    \"Wow, I didn't expect that!\",\n",
    "    \"This joke is hilarious.\"\n",
    "]\n",
    "\n",
    "for msg in examples:\n",
    "    print(mihuu_response(msg))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3aea91e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
